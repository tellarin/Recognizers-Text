---
#ISO 639-2 Code
LangMarker: Por
CheckBothBeforeAfter: !bool false
TillRegex: !simpleRegex
  def: (?<till>ate|as|às|até|ateh|a|ao|--|-|—|——)(\s+(o|[aà](s)?))?
AndRegex: !simpleRegex
  def: (?<and>e|e\s*o|--|-|—|——)
DayRegex: !simpleRegex
  def: (?<day>01|02|03|04|05|06|07|08|09|1|10|11|12|13|14|15|16|17|18|19|2|20|21|22|23|24|25|26|27|28|29|3|30|31|4|5|6|7|8|9)(?=\b|t)
MonthNumRegex: !simpleRegex
  def: (?<month>01|02|03|04|05|06|07|08|09|10|11|12|1|2|3|4|5|6|7|8|9)\b
AmDescRegex: !nestedRegex
  def: ({BaseDateTime.BaseAmDescRegex})
  references: [BaseDateTime.BaseAmDescRegex]
PmDescRegex: !nestedRegex
  def: ({BaseDateTime.BasePmDescRegex})
  references: [BaseDateTime.BasePmDescRegex]
AmPmDescRegex: !nestedRegex
  def: ({BaseDateTime.BaseAmPmDescRegex})
  references: [BaseDateTime.BaseAmPmDescRegex]
DescRegex: !nestedRegex
  def: (?<desc>({AmDescRegex}|{PmDescRegex}))
  references: [ AmDescRegex, PmDescRegex ]
RangePrefixRegex: !simpleRegex
  def: ((desde|de|da|das|entre)\s+(a(s)?\s+)?)
# As month number can't be 0, so add (?!\.0\b) to filter out some wrong cases
TwoDigitYearRegex: !nestedRegex
  def: \b(?<![$])(?<year>([0-27-9]\d))(?!(\s*((\:)|{AmDescRegex}|{PmDescRegex}|\.\d)))\b
  references: [ AmDescRegex, PmDescRegex]
FullTextYearRegex: !simpleRegex
  # TODO: modify below regex according to the counterpart in English
  def: ^[\*]
YearRegex: !nestedRegex
  def: ({BaseDateTime.FourDigitYearRegex}|{FullTextYearRegex})
  references: [ BaseDateTime.FourDigitYearRegex, FullTextYearRegex ]
RelativeMonthRegex: !simpleRegex
  def: (?<relmonth>([nd]?es[st]e|pr[óo]ximo|passsado|[uú]ltimo)\s+m[eê]s)\b
MonthRegex: !simpleRegex
  def: (?<month>abr(il)?|ago(sto)?|dez(embro)?|fev(ereiro)?|jan(eiro)?|ju[ln](ho)?|mar([çc]o)?|maio?|nov(embro)?|out(ubro)?|sep?t(embro)?)
MonthSuffixRegex: !nestedRegex
  def: (?<msuf>((em|no)\s+|d[eo]\s+)?({RelativeMonthRegex}|{MonthRegex}))
  references: [ RelativeMonthRegex, MonthRegex ]
DateUnitRegex: !simpleRegex
  def: (?<unit>anos?|meses|m[êe]s|semanas?|dias?)\b
PastRegex: !simpleRegex
  def: (?<past>\b(passad[ao](s)?|[uú]ltim[oa](s)?|anterior(es)?|h[aá]|pr[ée]vi[oa](s)?)\b)
FutureRegex: !simpleRegex
  def: (?<past>\b(seguinte(s)?|pr[oó]xim[oa](s)?|dentro\s+de|em|daqui\s+a)\b)
SimpleCasesRegex: !nestedRegex
  def: \b((desde\s+[oa]|desde|d[oa])\s+)?(dia\s+)?({DayRegex})\s*{TillRegex}\s*(o dia\s+)?({DayRegex})\s+{MonthSuffixRegex}((\s+|\s*,\s*){YearRegex})?\b
  references: [ DayRegex, TillRegex, MonthSuffixRegex, YearRegex ]
MonthFrontSimpleCasesRegex: !nestedRegex
  def: \b{MonthSuffixRegex}\s+((desde\s+[oa]|desde|d[oa])\s+)?(dia\s+)?({DayRegex})\s*{TillRegex}\s*({DayRegex})((\s+|\s*,\s*){YearRegex})?\b
  references: [ MonthSuffixRegex, DayRegex, TillRegex, YearRegex ]
MonthFrontBetweenRegex: !nestedRegex
  def: \b{MonthSuffixRegex}\s+((entre|entre\s+[oa]s?)\s+)(dias?\s+)?({DayRegex})\s*{AndRegex}\s*({DayRegex})((\s+|\s*,\s*){YearRegex})?\b
  references: [ DayRegex, AndRegex, MonthSuffixRegex, YearRegex ]
DayBetweenRegex: !nestedRegex
  def: \b((entre|entre\s+[oa]s?)\s+)(dia\s+)?({DayRegex})\s*{AndRegex}\s*({DayRegex})\s+{MonthSuffixRegex}((\s+|\s*,\s*){YearRegex})?\b
  references: [ DayRegex, AndRegex, MonthSuffixRegex, YearRegex ]
OneWordPeriodRegex: !simpleRegex
  def: \b(((pr[oó]xim[oa]?|[nd]?es[st]e|aquel[ea]|[uú]ltim[oa]?|em)\s+)?(?<month>abr(il)?|ago(sto)?|dez(embro)?|fev(ereiro)?|jan(eiro)?|ju[ln](ho)?|mar([çc]o)?|maio?|nov(embro)?|out(ubro)?|sep?t(embro)?)|(?<=\b(de|do|da|o|a)\s+)?(pr[oó]xim[oa](s)?|[uú]ltim[oa]s?|est(e|a))\s+(fim de semana|fins de semana|semana|m[êe]s|ano)|fim de semana|fins de semana|(m[êe]s|anos)? [àa] data)\b
MonthWithYearRegex: !nestedRegex
  def: \b(((pr[oó]xim[oa](s)?|[nd]?es[st]e|aquele|[uú]ltim[oa]?|em)\s+)?(?<month>abr(il)?|ago(sto)?|dez(embro)?|fev(ereiro)?|jan(eiro)?|ju[ln](ho)?|mar([çc]o)?|maio?|nov(embro)?|out(ubro)?|sep?t(embro)?)\s+((de|do|da|o|a)\s+)?({YearRegex}|(?<order>pr[oó]ximo(s)?|[uú]ltimo?|[nd]?es[st]e)\s+ano))\b
  references: [ YearRegex ]
MonthNumWithYearRegex: !nestedRegex
  def: ({YearRegex}(\s*?)[/\-\.](\s*?){MonthNumRegex})|({MonthNumRegex}(\s*?)[/\-](\s*?){YearRegex})
  references: [ YearRegex, MonthNumRegex ]
WeekOfMonthRegex: !nestedRegex
  def: (?<wom>(a|na\s+)?(?<cardinal>primeira?|1a|segunda|2a|terceira|3a|[qc]uarta|4a|quinta|5a|[uú]ltima)\s+semana\s+{MonthSuffixRegex})
  references: [ MonthSuffixRegex ]
WeekOfYearRegex: !nestedRegex
  def: (?<woy>(a|na\s+)?(?<cardinal>primeira?|1a|segunda|2a|terceira|3a|[qc]uarta|4a|quinta|5a|[uú]ltima?)\s+semana(\s+d[oe]?)?\s+({YearRegex}|(?<order>pr[oó]ximo|[uú]ltimo|[nd]?es[st]e)\s+ano))
  references: [ YearRegex ]
FollowedDateUnit: !nestedRegex
  def: ^\s*{DateUnitRegex}
  references: [ DateUnitRegex ]
NumberCombinedWithDateUnit: !nestedRegex
  def: \b(?<num>\d+(\.\d*)?){DateUnitRegex}
  references: [ DateUnitRegex ]
QuarterRegex: !nestedRegex
  def: (n?o\s+)?(?<cardinal>primeiro|1[oº]|segundo|2[oº]|terceiro|3[oº]|[qc]uarto|4[oº])\s+trimestre(\s+d[oe]|\s*,\s*)?\s+({YearRegex}|(?<order>pr[oó]ximo(s)?|[uú]ltimo?|[nd]?es[st]e)\s+ano)
  references: [ YearRegex ]
QuarterRegexYearFront: !nestedRegex
  def: ({YearRegex}|(?<order>pr[oó]ximo(s)?|[uú]ltimo?|[nd]?es[st]e)\s+ano)\s+(n?o\s+)?(?<cardinal>(primeiro)|1[oº]|segundo|2[oº]|terceiro|3[oº]|[qc]uarto|4[oº])\s+trimestre
  references: [ YearRegex ]
AllHalfYearRegex: !simpleRegex
  # TODO: modify below regex according to the counterpart in English
  def: ^[.]
PrefixDayRegex: !simpleRegex
  # TODO: modify below regex according to the counterpart in English
  def: ^[.] 
SeasonRegex: !nestedRegex
  def: \b(?<season>(([uú]ltim[oa]|[nd]?es[st][ea]|n?[oa]|(pr[oó]xim[oa]s?|seguinte))\s+)?(?<seas>primavera|ver[ãa]o|outono|inverno)((\s+)?(seguinte|((de\s+|,)?\s*{YearRegex})|((do\s+)?(?<order>pr[oó]ximo|[uú]ltimo|[nd]?es[st]e)\s+ano)))?)\b
  references: [ YearRegex ]
WhichWeekRegex: !simpleRegex
  def: \b(semana)(\s*)(?<number>5[0-3]|[1-4]\d|0?[1-9])\b
WeekOfRegex: !simpleRegex
  def: (semana)(\s*)((do|da|de))
MonthOfRegex: !simpleRegex
  def: (mes)(\s*)((do|da|de))
RangeUnitRegex: !simpleRegex
  def: \b(?<unit>anos?|meses|m[êe]s|semanas?)\b
InConnectorRegex: !simpleRegex
  def: \b(em)\b
SinceYearSuffixRegex: !simpleRegex
  # TODO: modify below regex according to the counterpart in English
  def: ^[.]
WithinNextPrefixRegex: !simpleRegex
  # TODO: modify below regex according to the counterpart in English
  def: ^[.]
CenturySuffixRegex: !simpleRegex
  # TODO: modify below regex according to the counterpart in English
  def: ^[.]
RelativeRegex: !simpleRegex
  # TODO: modify below regex according to the counterpart in English
  def: ^[.]
StrictRelativeRegex: !simpleRegex
  # TODO: modify below regex according to the counterpart in English
  def: ^[.]
FromRegex: !simpleRegex
  def: ((desde|de)(\s*a(s)?)?)$
ConnectorAndRegex: !simpleRegex
  def: (e\s*([àa](s)?)?)$
BetweenRegex: !simpleRegex
  def: (entre\s*([oa](s)?)?)
WeekDayRegex: !simpleRegex
  def: \b(?<weekday>(domingos?|(segunda|ter[çc]a|quarta|quinta|sexta)s?([-\s+]feiras?)?|s[aá]bados?|(2|3|4|5|6)[aª])\b|(dom|seg|ter[cç]|qua|qui|sex|sab)\b(\.?(?=\s|,|;|$)))
OnRegex: !nestedRegex
  def: (?<=\b(em|no)\s+)({DayRegex}s?)\b
  references: [ DayRegex ]
RelaxedOnRegex: !simpleRegex
  def: (?<=\b(em|n[oa]|d[oa])\s+)(dia\s+)?((?<day>10|11|12|13|14|15|16|17|18|19|1|20|21|22|23|24|25|26|27|28|29|2|30|31|3|4|5|6|7|8|9)s?)\b
ThisRegex: !nestedRegex
  def: \b(([nd]?es[st][ea]\s*){WeekDayRegex})|({WeekDayRegex}\s*([nd]?es[st]a\s+semana))\b
  references: [ WeekDayRegex ]
LastDateRegex: !nestedRegex
  def: \b(([uú]ltim[ao])\s*{WeekDayRegex})|({WeekDayRegex}(\s+(([nd]?es[st]a|na|da)\s+([uú]ltima\s+)?semana)))\b
  references: [ WeekDayRegex ]
NextDateRegex: !nestedRegex
  def: \b(((pr[oó]xim[oa]|seguinte)\s*){WeekDayRegex})|({WeekDayRegex}((\s+(pr[oó]xim[oa]|seguinte))|(\s+(da\s+)?(semana\s+seguinte|pr[oó]xima\s+semana))))\b
  references: [ WeekDayRegex ]
SpecialDayRegex: !simpleRegex
  def: \b((d?o\s+)?(dia\s+antes\s+de\s+ontem|antes\s+de\s+ontem|anteontem)|((d?o\s+)?(dia\s+|depois\s+|dia\s+depois\s+)?de\s+amanh[aã])|(o\s)?dia\s+seguinte|(o\s)?pr[oó]ximo\s+dia|(o\s+)?[uú]ltimo\s+dia|ontem|amanh[ãa]|hoje)|(do\s+dia$)\b
SpecialDayWithNumRegex: !simpleRegex
  # TODO: modify below regex according to the counterpart in English
  def: ^[.]
ForTheRegex: !simpleRegex
  # TODO: modify below regex according to the counterpart in English
  def: .^
WeekDayAndDayOfMonthRegex: !simpleRegex
  # TODO: modify below regex according to the counterpart in English
  def: .^
WeekDayAndDayRegex: !simpleRegex
  # TODO: modify below regex according to the counterpart in English
  def: .^
WeekDayOfMonthRegex: !nestedRegex
  def: (?<wom>(n?[ao]\s+)?(?<cardinal>primeir[ao]|1[ao]|segund[ao]|2[ao]|terceir[ao]|3[ao]|[qc]uart[ao]|4[ao]|quint[ao]|5[ao]|[uú]ltim[ao])\s+{WeekDayRegex}\s+{MonthSuffixRegex})
  references: [ WeekDayRegex, MonthSuffixRegex ]
RelativeWeekDayRegex: !simpleRegex
  # TODO: modify below regex according to the counterpart in English
  def: ^[.]
AmbiguousRangeModifierPrefix: !simpleRegex
  # TODO: modify below regex according to the counterpart in English
  def: ^[.]
NumberEndingPattern: !simpleRegex
  # TODO: modify below regex according to the counterpart in English
  def: ^[.]
SpecialDateRegex: !nestedRegex
  def: (?<=\bno\s+){DayRegex}\b
  references: [ DayRegex ]
OfMonthRegex: !nestedRegex
  def: ^\s*de\s*{MonthSuffixRegex}
  references: [ MonthSuffixRegex ]
MonthEndRegex: !nestedRegex
  def: ({MonthRegex}\s*(o)?\s*$)
  references: [ MonthRegex ]
WeekDayEnd: !nestedRegex
  def: '{WeekDayRegex}\s*,?\s*$'
  references: [ WeekDayRegex ]
WeekDayStart: !simpleRegex
  def: ^[\.]
DateYearRegex: !nestedRegex
  def: (?<year>{YearRegex}|{TwoDigitYearRegex})
  references: [ YearRegex, TwoDigitYearRegex ]
DateExtractor1: !nestedRegex
  # (domingo,)? 5 de Abril
  def: \b({WeekDayRegex}(\s+|\s*,\s*))?{DayRegex}?((\s*(de)|[/\\\.\-])\s*)?{MonthRegex}\b
  references: [ WeekDayRegex, DayRegex, MonthRegex ]
DateExtractor2: !nestedRegex
  # (domingo,)? 5 de Abril 5, 2016
  def: \b({WeekDayRegex}(\s+|\s*,\s*))?{DayRegex}\s*([\.\-]|de)?\s*{MonthRegex}?(\s*(,|de)\s*){YearRegex}\b
  references: [ MonthRegex, DayRegex, YearRegex, WeekDayRegex ]
DateExtractor3: !nestedRegex
  # (domingo,)? 6 de Abril
  def: \b({WeekDayRegex}(\s+|\s*,\s*))?{DayRegex}(\s+|\s*,\s*|\s+de\s+|\s*-\s*){MonthRegex}((\s+|\s*(,|de)\s*){YearRegex})?\b
  references: [ DayRegex, MonthRegex, WeekDayRegex, YearRegex ]
DateExtractor4: !nestedRegex
  # 3-23-2017
  def: \b{MonthNumRegex}\s*[/\\\-]\s*{DayRegex}\s*[/\\\-]\s*{DateYearRegex}
  references: [ MonthNumRegex, DayRegex, DateYearRegex ]
DateExtractor5: !nestedRegex
  # 23-3-2015
  def: \b{DayRegex}\s*[/\\\-\.]\s*({MonthNumRegex}|{MonthRegex})\s*[/\\\-\.]\s*{DateYearRegex}
  references: [ MonthNumRegex, MonthRegex, DayRegex, DateYearRegex ]
DateExtractor6: !nestedRegex
  # o 1/3 (1o de março)
  def: (?<=\b(em|no|o)\s+){MonthNumRegex}[\-\.]{DayRegex}\b
  references: [ MonthNumRegex, DayRegex ]
DateExtractor7: !nestedRegex
  # 7/23
  def: \b{MonthNumRegex}\s*/\s*{DayRegex}((\s+|\s*(,|de)\s*){DateYearRegex})?\b
  references: [ MonthNumRegex, DayRegex, DateYearRegex ]
DateExtractor8: !nestedRegex
  # o 24-12
  def: (?<=\b(em|no|o)\s+){DayRegex}[\\\-]{MonthNumRegex}\b
  references: [ MonthNumRegex, DayRegex ]
DateExtractor9: !nestedRegex
  # 23/7
  def: \b{DayRegex}\s*/\s*{MonthNumRegex}((\s+|\s*(,|de)\s*){DateYearRegex})?\b
  references: [ DayRegex, MonthNumRegex, DateYearRegex ]
DateExtractor10: !nestedRegex
  # 2015-12-23
  def: \b{YearRegex}\s*[/\\\-\.]\s*{MonthNumRegex}\s*[/\\\-\.]\s*{DayRegex}
  references: [ YearRegex, MonthNumRegex, DayRegex ]
DateExtractor11: !nestedRegex
  # dia 24
  def: (?<=\b(dia)\s+){DayRegex}
  references: [ DayRegex ]
# PortugueseTimeExtractorConfiguration
HourNumRegex: !simpleRegex
  def: \b(?<hournum>zero|uma|duas|tr[êe]s|[qc]uatro|cinco|seis|sete|oito|nove|dez|onze|doze)\b
MinuteNumRegex: !simpleRegex
  def: (?<minnum>um|dois|tr[êe]s|[qc]uatro|cinco|seis|sete|oito|nove|dez|onze|doze|treze|catorze|quatorze|quinze|dez[ea]sseis|dez[ea]sete|dezoito|dez[ea]nove|vinte|trinta|[qc]uarenta|cin[qc]uenta)
DeltaMinuteNumRegex: !simpleRegex
  def: (?<deltaminnum>um|dois|tr[êe]s|[qc]uatro|cinco|seis|sete|oito|nove|dez|onze|doze|treze|catorze|quatorze|quinze|dez[ea]sseis|dez[ea]sete|dezoito|dez[ea]nove|vinte|trinta|[qc]uarenta|cin[qc]uenta)
OclockRegex: !simpleRegex
  # "... em ponto"
  def: (?<oclock>em\s+ponto)
PmRegex: !simpleRegex
  # "... tarde"
  def: (?<pm>((pela|de|da|\b[àa]\b|na)\s+(tarde|noite)))|((depois\s+do|ap[óo]s\s+o)\s+(almo[çc]o|meio dia|meio-dia))
AmRegex: !simpleRegex
  # "... da manhã"
  def: (?<am>(pela|de|da|na)\s+(manh[ãa]|madrugada))
AmTimeRegex: !simpleRegex
  def: (?<am>([dn]?es[st]a|(pela|de|da|na))\s+(manh[ãa]|madrugada))
PmTimeRegex: !simpleRegex
  def: (?<pm>(([dn]?es[st]a|\b[àa]\b|(pela|de|da|na))\s+(tarde|noite)))|((depois\s+do|ap[óo]s\s+o)\s+(almo[çc]o|meio dia|meio-dia))
LessThanOneHour: !nestedRegex
  # "e meia ..." "e quinze ..."
  def: (?<lth>((\s+e\s+)?(quinze|(um\s+|dois\s+|tr[êes]\s+)?quartos?)|quinze|(\s*)(um\s+|dois\s+|tr[êes]\s+)?quartos?|(\s+e\s+)(meia|trinta)|{BaseDateTime.DeltaMinuteRegex}(\s+(minuto|minutos|min|mins))|{DeltaMinuteNumRegex}(\s+(minuto|minutos|min|mins))))
  references: [ BaseDateTime.DeltaMinuteRegex, DeltaMinuteNumRegex ]
TensTimeRegex: !simpleRegex
  def: (?<tens>dez|vinte|trinta|[qc]uarenta|cin[qc]uenta)
WrittenTimeRegex: !nestedRegex
  # "seis e trinta", "seis e vinte um", "dez pras seis"
  def: (?<writtentime>({HourNumRegex}\s*((e|menos)\s+)?({MinuteNumRegex}|({TensTimeRegex}((\s*e\s+)?{MinuteNumRegex})?)))|(({MinuteNumRegex}|({TensTimeRegex}((\s*e\s+)?{MinuteNumRegex})?))\s*((para as|pras|antes da|antes das)\s+)?({HourNumRegex}|{BaseDateTime.HourRegex})))
  references: [ HourNumRegex, MinuteNumRegex, TensTimeRegex, BaseDateTime.HourRegex ]
TimePrefix: !nestedRegex
  def: (?<prefix>{LessThanOneHour}(\s+(passad[ao]s)\s+(as)?|\s+depois\s+(das?|do)|\s+pras?|\s+(para|antes)?\s+([àa]s?))?)
  references: [ LessThanOneHour ]
TimeSuffix: !nestedRegex
  def: (?<suffix>({LessThanOneHour}\s+)?({AmRegex}|{PmRegex}|{OclockRegex}))
  references: [ LessThanOneHour, AmRegex, PmRegex, OclockRegex ]
BasicTime: !nestedRegex
  def: (?<basictime>{WrittenTimeRegex}|{HourNumRegex}|{BaseDateTime.HourRegex}:{BaseDateTime.MinuteRegex}(:{BaseDateTime.SecondRegex})?|{BaseDateTime.HourRegex})
  references: [ WrittenTimeRegex, HourNumRegex, BaseDateTime.HourRegex, BaseDateTime.MinuteRegex, BaseDateTime.SecondRegex ]
AtRegex: !nestedRegex
  # "as quatro" "às 3"
  def: \b(?<=\b([aà]s?)\s+)({WrittenTimeRegex}|{HourNumRegex}|{BaseDateTime.HourRegex})\b
  references: [ HourNumRegex, BaseDateTime.HourRegex, WrittenTimeRegex ]
ConnectNumRegex: !nestedRegex
  def: ({BaseDateTime.HourRegex}(?<min>00|01|02|03|04|05|06|07|08|09|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31|32|33|34|35|36|37|38|39|40|41|42|43|44|45|46|47|48|49|50|51|52|53|54|55|56|57|58|59)\s*{DescRegex})
  references: [ BaseDateTime.HourRegex, DescRegex ]
TimeRegex1: !nestedRegex
  # (três min depois das)? sete|7|(sete e trinta) pm
  def: (\b{TimePrefix}\s+)?({WrittenTimeRegex}|{HourNumRegex}|{BaseDateTime.HourRegex})\s*({DescRegex})
  references: [ TimePrefix, WrittenTimeRegex, HourNumRegex, BaseDateTime.HourRegex, DescRegex ]
TimeRegex2: !nestedRegex
  # (tres min depois das)? 3:00(:00)? (pm)?
  def: (\b{TimePrefix}\s+)?(t)?{BaseDateTime.HourRegex}(\s*)?:(\s*)?{BaseDateTime.MinuteRegex}((\s*)?:(\s*)?{BaseDateTime.SecondRegex})?((\s*{DescRegex})|\b)
  references: [ TimePrefix, BaseDateTime.HourRegex, BaseDateTime.MinuteRegex, BaseDateTime.SecondRegex, DescRegex ]
TimeRegex3: !nestedRegex
  # (tres min depois das)? 3.00 (pm)
  def: (\b{TimePrefix}\s+)?{BaseDateTime.HourRegex}\.{BaseDateTime.MinuteRegex}(\s*{DescRegex})
  references: [ TimePrefix, BaseDateTime.HourRegex, BaseDateTime.MinuteRegex, DescRegex ]
TimeRegex4: !nestedRegex
  # (tres min depois das) (cinco e trinta|sete|7|7:00(:00)?) (pm)?
  def: \b(({DescRegex}?)|({BasicTime}?)({DescRegex}?))({TimePrefix}\s*)({HourNumRegex}|{BaseDateTime.HourRegex})?(\s+{TensTimeRegex}(\s+e\s+)?{MinuteNumRegex}?)?({OclockRegex})?\b
  references: [ DescRegex, BasicTime, TimePrefix, HourNumRegex, BaseDateTime.HourRegex, TensTimeRegex, MinuteNumRegex, OclockRegex ]
TimeRegex5: !nestedRegex
  # (tres min depois das) (cinco e trinta|sete|7|7:00(:00)?) (pm)? (da noite)
  def: \b({TimePrefix}|{BasicTime}{TimePrefix})\s+(\s*{DescRegex})?{BasicTime}?\s*{TimeSuffix}\b
  references: [ TimePrefix, BasicTime, DescRegex, TimeSuffix ]
TimeRegex6: !nestedRegex
  # (cinco e trinta|sete|7|7:00(:00)?) (pm)? (da noite)
  def: ({BasicTime}(\s*{DescRegex})?\s+{TimeSuffix}\b)
  references: [ BasicTime, DescRegex, TimeSuffix ]
TimeRegex7: !nestedRegex
  # (à noite) às (cinco e trinta|sete|7|7:00(:00)?) (pm)?
  def: \b{TimeSuffix}\s+[àa]s?\s+{BasicTime}((\s*{DescRegex})|\b)
  references: [ TimeSuffix, BasicTime, DescRegex ]
TimeRegex8: !nestedRegex
  # (à noite) (cinco e trinta|sete|7|7:00(:00)?) (pm)?
  def: \b{TimeSuffix}\s+{BasicTime}((\s*{DescRegex})|\b)
  references: [ TimeSuffix, BasicTime, DescRegex ]
TimeRegex9: !nestedRegex
  # onze (e)? vinte e cinco
  def: \b(?<writtentime>{HourNumRegex}\s+({TensTimeRegex}\s*)?(e\s+)?{MinuteNumRegex}?)\b
  references: [ HourNumRegex, TensTimeRegex, MinuteNumRegex ]
TimeRegex10: !simpleRegex
  def: (\b([àa]|ao?)|na|de|da|pela)\s+(madrugada|manh[ãa]|meio\s*dia|meia\s*noite|tarde|noite)
TimeRegex11: !nestedRegex
  # (tres menos vinte) (pm)?
  def: \b({WrittenTimeRegex})({DescRegex}?)\b
  references: [ WrittenTimeRegex, DescRegex ]
TimeRegex12: !nestedRegex
  # (tres min depois das)? 3.00 (pm)?
  def: (\b{TimePrefix}\s+)?{BaseDateTime.HourRegex}(\s*h\s*){BaseDateTime.MinuteRegex}(\s*{DescRegex})?
  references: [ TimePrefix, BaseDateTime.HourRegex, BaseDateTime.MinuteRegex, DescRegex ]
# PortugueseDateTimeExtractorConfiguration
PrepositionRegex: !simpleRegex
  def: (?<prep>([àa]s?|em|por|pelo|pela|no|na|de|d[oa]?)?$)
NowRegex: !simpleRegex
  def: \b(?<now>((logo|exatamente)\s+)?agora(\s+mesmo)?|neste\s+momento|(assim\s+que|t[ãa]o\s+cedo\s+quanto)\s+(poss[ií]vel|possas?|possamos)|o\s+mais\s+(cedo|r[aá]pido)\s+poss[íi]vel|recentemente|previamente)\b
SuffixRegex: !simpleRegex
  def: ^\s*((e|a|em|por|pelo|pela|no|na|de)\s+)?(manh[ãa]|madrugada|meio\s*dia|tarde|noite)\b
TimeOfDayRegex: !simpleRegex
  def: \b(?<timeOfDay>manh[ãa]|madrugada|tarde|noite|((depois\s+do|ap[óo]s\s+o)\s+(almo[çc]o|meio dia|meio-dia)))\b
SpecificTimeOfDayRegex: !nestedRegex
  def: \b(((((a)?\s+|[nd]?es[st]a|seguinte|pr[oó]xim[oa]|[uú]ltim[oa])\s+)?{TimeOfDayRegex}))\b
  references: [ TimeOfDayRegex ]
TimeOfTodayAfterRegex: !nestedRegex
  def: ^\s*(,\s*)?([àa]|em|por|pelo|pela|de|no|na?\s+)?{SpecificTimeOfDayRegex}
  references: [ SpecificTimeOfDayRegex ]
TimeOfTodayBeforeRegex: !nestedRegex
  def: ({SpecificTimeOfDayRegex}(\s*,)?(\s+(a\s+la(s)?|para))?\s*)
  references: [ SpecificTimeOfDayRegex ]
SimpleTimeOfTodayAfterRegex: !nestedRegex
  def: ({HourNumRegex}|{BaseDateTime.HourRegex})\s*(,\s*)?((en|de(l)?)?\s+)?{SpecificTimeOfDayRegex}
  references: [ HourNumRegex, BaseDateTime.HourRegex, SpecificTimeOfDayRegex ]
SimpleTimeOfTodayBeforeRegex: !nestedRegex
  def: ({SpecificTimeOfDayRegex}(\s*,)?(\s+(a\s+la|para))?\s*({HourNumRegex}|{BaseDateTime.HourRegex}))
  references: [ SpecificTimeOfDayRegex, HourNumRegex, BaseDateTime.HourRegex ]
SpecificEndOfRegex: !simpleRegex
  def: ((no|ao)\s+)?(fi(m|nal)|t[ée]rmin(o|ar))(\s+d?o(\s+dia)?(\s+de)?)?\s*$
UnspecificEndOfRegex: !simpleRegex
  # TODO: modify below regex according to the counterpart in English
  def: ^[.]
UnspecificEndOfRangeRegex: !simpleRegex
  # TODO: modify below regex according to the counterpart in English
  def: ^[.]
UnitRegex: !simpleRegex
  def: (?<unit>anos|ano|meses|m[êe]s|semanas|semana|dias|dia|horas|hora|h|hr|hrs|hs|minutos|minuto|mins|min|segundos|segundo|segs|seg)\b
ConnectorRegex: !simpleRegex
  def: ^(,|t|para [ao]|para as|pras|cerca de|cerca das|perto de|perto das|quase)$
# PortugueseTimePeriodExtractorConfiguration
TimeHourNumRegex: !simpleRegex
  def: (?<hour>vinte e um|vinte e dois|vinte e tr[êe]s|vinte e quatro|zero|um|uma|dois|duas|tr[êe]s|quatro|cinco|seis|sete|oito|nove|dez|onze|doze|treze|quatorze|catorze|quinze|dez[ea]sseis|dez[ea]ssete|dezoito|dez[ea]nove|vinte)
PureNumFromTo: !nestedRegex
  def: ((desde|de|da|das)\s+(a(s)?\s+)?)?({BaseDateTime.HourRegex}|{TimeHourNumRegex})(\s*(?<leftDesc>{DescRegex}))?\s*{TillRegex}\s*({BaseDateTime.HourRegex}|{TimeHourNumRegex})\s*(?<rightDesc>{PmRegex}|{AmRegex}|{DescRegex})?
  references: [ BaseDateTime.HourRegex, TimeHourNumRegex, DescRegex, TillRegex, PmRegex, AmRegex ]
PureNumBetweenAnd: !nestedRegex
  def: (entre\s+((a|as)?\s+)?)({BaseDateTime.HourRegex}|{TimeHourNumRegex})(\s*(?<leftDesc>{DescRegex}))?\s*e\s*(a(s)?\s+)?({BaseDateTime.HourRegex}|{TimeHourNumRegex})\s*(?<rightDesc>{PmRegex}|{AmRegex}|{DescRegex})?
  references: [ BaseDateTime.HourRegex, TimeHourNumRegex, DescRegex, PmRegex, AmRegex ]
SpecificTimeFromTo: !simpleRegex
  # TODO: modify below regex according to the counterpart in English
  def: ^[.]
SpecificTimeBetweenAnd: !simpleRegex
  # TODO: modify below regex according to the counterpart in English
  def: ^[.]
TimeUnitRegex: !simpleRegex
  def: (?<unit>horas|hora|h|minutos|minuto|mins|min|segundos|segundo|secs|sec)\b
TimeFollowedUnit: !nestedRegex
  def: ^\s*{TimeUnitRegex}
  references: [ TimeUnitRegex ]
TimeNumberCombinedWithUnit: !nestedRegex
  def: \b(?<num>\d+(\,\d*)?)\s*{TimeUnitRegex}
  references: [ TimeUnitRegex ]
# PortugueseDateTimePeriodExtractorConfiguration
DateTimePeriodNumberCombinedWithUnit: !nestedRegex
  def: \b(?<num>\d+(\.\d*)?)\s*{TimeUnitRegex}
  references: [ TimeUnitRegex ]
PeriodTimeOfDayWithDateRegex: !simpleRegex
  def: \b((e|[àa]|em|na|no|ao|pel[ao]|de)\s+)?(?<timeOfDay>manh[ãa]|madrugada|(passado\s+(o\s+)?)?meio\s+dia|tarde|noite)\b
RelativeTimeUnitRegex: !nestedRegex
  def: ({PastRegex}|{FutureRegex})\s+{UnitRegex}|{UnitRegex}\s+({PastRegex}|{FutureRegex})
  references: [ PastRegex, FutureRegex, UnitRegex ]
# PortugueseDurationExtractorConfiguration
SuffixAndRegex: !simpleRegex
  def: (?<suffix>\s*(e)\s+(?<suffix_num>meia|(um\s+)?quarto))
FollowedUnit: !nestedRegex
  def: ^\s*{UnitRegex}
  references: [ UnitRegex ]
LessThanRegex: !simpleRegex
  # TODO: modify below regex according to the counterpart in English
  def: ^[.]
MoreThanRegex: !simpleRegex
  # TODO: modify below regex according to the counterpart in English
  def: ^[.]
DurationNumberCombinedWithUnit: !nestedRegex
  def: \b(?<num>\d+(\,\d*)?){UnitRegex}
  references: [ UnitRegex ]
AnUnitRegex: !nestedRegex
  def: \b(um(a)?)\s+{UnitRegex}
  references: [ UnitRegex ]
DuringRegex: !simpleRegex
  # TODO: modify below regex according to the counterpart in English
  def: ^[.]
AllRegex: !simpleRegex
  def: \b(?<all>tod[oa]?\s+(o|a)\s+(?<unit>ano|m[êe]s|semana|dia))\b
HalfRegex: !simpleRegex
  def: \b(?<half>mei[oa]\s+(?<unit>ano|m[êe]s|semana|dia|hora))\b
ConjunctionRegex: !simpleRegex
  # TODO: modify below regex according to the counterpart in English
  def: ^[.]
InexactNumberRegex: !simpleRegex
  def: \b(poucos|pouco|algum|alguns|v[áa]rios)\b
InexactNumberUnitRegex: !nestedRegex
  def: \b(poucos|pouco|algum|alguns|v[áa]rios)\s+{UnitRegex}
  references: [ UnitRegex ]
# PortugueseHolidayExtractorConfiguration
HolidayRegex1: !nestedRegex
  def: \b(?<holiday>sexta-feira santa|sexta-feira da paix[ãa]o|quarta-feira de cinzas|carnaval|dia (de|de los) presidentes?|ano novo chin[eê]s|ano novo|v[ée]spera de ano novo|natal|v[ée]spera de natal|dia de a[cç][ãa]o de gra[çc]as|a[cç][ãa]o de gra[çc]as|yuandan|halloween|dia das bruxas|p[áa]scoa)(\s+(d[eo]?\s+)?({YearRegex}|(?<order>(pr[oó]xim[oa]?|[nd]?es[st][ea]|[uú]ltim[oa]?|em))\s+ano))?\b
  references: [ YearRegex ]
HolidayRegex2: !nestedRegex
  def: \b(?<holiday>(dia( d[eoa]s?)? )?(martin luther king|todos os santos|trabalho|s[ãa]o (patr[íi]cio|francisco|jorge|jo[ãa]o)|independ[êe]ncia|trabalhador|trabalho))(\s+(d[eo]?\s+)?({YearRegex}|(?<order>(pr[oó]xim[oa]?|[nd]?es[st][ea]|[uú]ltim[oa]?|em))\s+ano))?\b
  references: [ YearRegex ]
HolidayRegex3: !nestedRegex
  def: \b(?<holiday>(dia( d[eoa]s?)? )(trabalhador|trabalhadores|trabalho|m[ãa]es?|pais?|mulher(es)?|crian[çc]as?|marmota|professor|professores))(\s+(d[eo]?\s+)?({YearRegex}|(?<order>(pr[oó]xim[oa]?|[nd]?es[st][ea]|[uú]ltim[oa]?|em))\s+ano))?\b
  references: [ YearRegex ]
# PortugueseMergedExtractorConfiguration
BeforeRegex: !simpleRegex
  def: (antes(\s+(de|dos?|das?)?)?)
AfterRegex: !simpleRegex
  def: ((depois|ap[óo]s)(\s*(de|d?os?|d?as?)?)?)
SinceRegex: !simpleRegex
  def: (desde(\s+(as?|o))?)
AroundRegex: !simpleRegex
  # TODO: modify below regex according to the counterpart in English
  def: ^[.]
# PortugueseSetExtractorConfiguration
PeriodicRegex: !simpleRegex
  def: \b(?<periodic>di[áa]ri[ao]|diariamente|mensalmente|semanalmente|quinzenalmente|anualmente)\b
EachExpression: !simpleRegex
  def: cada|tod[oa]s?\s*([oa]s)?
EachUnitRegex: !nestedRegex
  def: (?<each>({EachExpression})\s*{UnitRegex})
  references: [ EachExpression, UnitRegex ]
EachPrefixRegex: !nestedRegex
  def: (?<each>({EachExpression})\s*$)
  references: [ EachExpression ]
EachDayRegex: !nestedRegex
  def: \s*({EachExpression})\s*dias\s*\b
  references: [ EachExpression ]
BeforeEachDayRegex: !nestedRegex
  def: ({EachExpression})\s*dias(\s+(as|ao))?\s*\b
  references: [ EachExpression ]
SetEachRegex: !nestedRegex
  def: (?<each>({EachExpression})\s*)
  references: [ EachExpression ]
LaterEarlyPeriodRegex: !simpleRegex
  # TODO: modify below regex according to the counterpart in English
  def: ^[.]
WeekWithWeekDayRangeRegex: !simpleRegex
  # TODO: modify below regex according to the counterpart in English
  def: ^[.]
GeneralEndingRegex: !simpleRegex
  # TODO: modify below regex according to the counterpart in English
  def: ^[.]
MiddlePauseRegex: !simpleRegex
  # TODO: modify below regex according to the counterpart in English
  def: ^[.]
PrefixArticleRegex: !simpleRegex
  # TODO: modify below regex according to the counterpart in English
  def: ^[\.]
OrRegex: !simpleRegex
  # TODO: modify below regex according to the counterpart in English
  def: ^[.]
YearPlusNumberRegex: !simpleRegex
  # TODO: modify below regex according to the counterpart in English
  def: ^[.]
NumberAsTimeRegex: !simpleRegex
  # TODO: modify below regex according to the counterpart in English
  def: ^[.]
TimeBeforeAfterRegex: !simpleRegex
  # TODO: modify below regex according to the counterpart in English
  def: ^[.]
DateNumberConnectorRegex: !simpleRegex
  # TODO: modify below regex according to the counterpart in English
  def: ^[.]
ComplexDatePeriodRegex: !simpleRegex
  # TODO: modify below regex according to the counterpart in English
  def: ^[.]
# PortugueseDatetimeUtilityConfiguration
AgoRegex: !simpleRegex
  def: \b(antes|atr[áa]s|no passado)\b
LaterRegex: !simpleRegex
  def: \b(depois d[eoa]s?|ap[óo]s (as)?|desde (as|o)|desde|no futuro|mais tarde)\b
# DateTimePeriodParser
Tomorrow: amanh[ãa]
# PortugueseCommonDateTimeParserConfiguration
UnitMap: !dictionary
  types: [ string, string ]
  entries:
    anos: Y
    ano: Y
    meses: MON
    mes: MON
    mês: MON
    semanas: W
    semana: W
    dias: D
    dia: D
    horas: H
    hora: H
    hrs: H
    hr: H
    h: H
    minutos: M
    minuto: M
    mins: M
    min: M
    segundos: S
    segundo: S
    segs: S
    seg: S
UnitValueMap: !dictionary
  types: [ string, long ]
  entries:
    anos: 31536000
    ano: 31536000
    meses: 2592000
    mes: 2592000
    mês: 2592000
    semanas: 604800
    semana: 604800
    dias: 86400
    dia: 86400
    horas: 3600
    hora: 3600
    hrs: 3600
    hr: 3600
    h: 3600
    minutos: 60
    minuto: 60
    mins: 60
    min: 60
    segundos: 1
    segundo: 1
    segs: 1
    seg: 1
# TODO: modify below regex according to the counterpart in English
SpecialYearPrefixesMap: !dictionary
  types: [ string, string ]
  entries:
    '': ''
SeasonMap: !dictionary
  types: [ string, string ]
  entries:
    primavera: SP
    verao: SU
    verão: SU
    outono: FA
    inverno: WI
SeasonValueMap: !dictionary
  types: [ string, int ]
  entries:
    SP: 3
    SU: 6
    FA: 9
    WI: 12
CardinalMap: !dictionary
  types: [ string, int ]
  entries:
    primeiro: 1
    primeira: 1
    1o: 1
    1a: 1
    segundo: 2
    segunda: 2
    2o: 2
    2a: 2
    terceiro: 3
    terceira: 3
    3o: 3
    3a: 3
    cuarto: 4
    quarto: 4
    cuarta: 4
    quarta: 4
    4o: 4
    4a: 4
    quinto: 5
    quinta: 5
    5o: 5
    5a: 5
DayOfWeek: !dictionary
  types: [ string, int ]
  entries:
    segunda-feira: 1
    segundas-feiras: 1
    segunda feira: 1
    segundas feiras: 1
    segunda: 1
    segundas: 1
    terça-feira: 2
    terças-feiras: 2
    terça feira: 2
    terças feiras: 2
    terça: 2
    terças: 2
    terca-feira: 2
    tercas-feiras: 2
    terca feira: 2
    tercas feiras: 2
    terca: 2
    tercas: 2
    quarta-feira: 3
    quartas-feiras: 3
    quarta feira: 3
    quartas feiras: 3
    quarta: 3
    quartas: 3
    quinta-feira: 4
    quintas-feiras: 4
    quinta feira: 4
    quintas feiras: 4
    quinta: 4
    quintas: 4
    sexta-feira: 5
    sextas-feiras: 5
    sexta feira: 5
    sextas feiras: 5
    sexta: 5
    sextas: 5
    sabado: 6
    sabados: 6
    sábado: 6
    sábados: 6
    domingo: 0
    domingos: 0
    seg: 1
    seg.: 1
    2a: 1
    ter: 2
    ter.: 2
    3a: 2
    qua: 3
    qua.: 3
    4a: 3
    qui: 4
    qui.: 4
    5a: 4
    sex: 5
    sex.: 5
    6a: 5
    sab: 6
    sab.: 6
    dom: 0
    dom.: 0
MonthOfYear: !dictionary
  types: [ string, int ]
  entries:
    'janeiro': 1
    'fevereiro': 2
    'março': 3
    'marco': 3
    'abril': 4
    'maio': 5
    'junho': 6
    'julho': 7
    'agosto': 8
    'septembro': 9
    'setembro': 9
    'outubro': 10
    'novembro': 11
    'dezembro': 12
    'jan': 1
    'fev': 2
    'mar': 3
    'abr': 4
    'mai': 5
    'jun': 6
    'jul': 7
    'ago': 8
    'sept': 9
    'set': 9
    'out': 10
    'nov': 11
    'dez': 12
    '1': 1
    '2': 2
    '3': 3
    '4': 4
    '5': 5
    '6': 6
    '7': 7
    '8': 8
    '9': 9
    '10': 10
    '11': 11
    '12': 12
    '01': 1
    '02': 2
    '03': 3
    '04': 4
    '05': 5
    '06': 6
    '07': 7
    '08': 8
    '09': 9
Numbers: !dictionary
  types: [ string, int ]
  entries:
    zero: 0
    um: 1
    uma: 1
    dois: 2
    tres: 3
    três: 3
    quatro: 4
    cinco: 5
    seis: 6
    sete: 7
    oito: 8
    nove: 9
    dez: 10
    onze: 11
    doze: 12
    dezena: 12
    dezenas: 12
    treze: 13
    catorze: 14
    quatorze: 14
    quinze: 15
    dezesseis: 16
    dezasseis: 16
    dezessete: 17
    dezassete: 17
    dezoito: 18
    dezenove: 19
    dezanove: 19
    vinte: 20
    'vinte e um': 21
    'vinte e uma': 21
    'vinte e dois': 22
    'vinte e duas': 22
    'vinte e tres': 23
    'vinte e três': 23
    'vinte e quatro': 24
    'vinte e cinco': 25
    'vinte e seis': 26
    'vinte e sete': 27
    'vinte e oito': 28
    'vinte e nove': 29
    trinta: 30
HolidayNames: !dictionary
  types: [ string, 'string[]' ]
  entries:
    pai: [ diadopai, diadospais ]
    mae: [ diadamae, diadasmaes ]
    acaodegracas: [ diadegracas, diadeacaodegracas, acaodegracas ]
    trabalho: [ diadotrabalho, diadotrabalhador, diadostrabalhadores ]
    pascoa: [ diadepascoa, pascoa ]
    natal: [ natal , diadenatal ]
    vesperadenatal: [ vesperadenatal]
    anonovo: [ anonovo, diadeanonovo, diadoanonovo ]
    vesperadeanonovo: [ vesperadeanonovo, vesperadoanonovo ]
    yuandan: [ yuandan ]
    todosossantos: [ todosossantos ]
    professor: [ diadoprofessor, diadosprofessores ]
    crianca: [ diadacrianca, diadascriancas ]
    mulher: [ diadamulher ]
    
VariableHolidaysTimexDictionary: !dictionary
  types: [ string, string ]
  entries:
    pai: -06-WXX-7-3
    mae: -05-WXX-7-2
    acaodegracas: -11-WXX-4-4
    trabalho: -05-WXX-1-1
    memoria: -03-WXX-2-4
 
DoubleNumbers: !dictionary
  types: [ string, double ]
  entries:
    metade: 0.5
    quarto: 0.25
DateTokenPrefix: 'em '
TimeTokenPrefix: 'as '
TokenBeforeDate: 'o '
TokenBeforeTime: 'as '
UpcomingPrefixRegex: !simpleRegex
  def: .^
# TODO: modify below regex according to the counterpart in English
NextPrefixRegex: !nestedRegex
  def: (pr[oó]xim[oa]|seguinte|{UpcomingPrefixRegex})\b
  references: [ UpcomingPrefixRegex ]
PastPrefixRegex: !simpleRegex
  def: .^
# TODO: modify below regex according to the counterpart in English
PreviousPrefixRegex: !nestedRegex
  def: ([uú]ltim[oa]|{PastPrefixRegex})\b
  references: [PastPrefixRegex]
ThisPrefixRegex: !simpleRegex
  def: ([nd]?es[st][ea])\b
RelativeDayRegex: !simpleRegex
  # TODO: implement the relative day regex if needed. If yes, they should be abstracted
  def: ^[\.]
RestOfDateRegex: !simpleRegex
  # TODO: add this regex, let it correspond to the one in English
  def: ^[\.]
RelativeDurationUnitRegex: !simpleRegex
  # TODO: change to Portuguese according to corresponding Regex
  def: ^[\.]
ReferenceDatePeriodRegex: !simpleRegex
  # TODO: modify below regex according to the counterpart in English
  def: ^[.]
FromToRegex: !simpleRegex
  # TODO: change to Portuguese according to corresponding Regex
  def: \b(from).+(to)\b.+
SingleAmbiguousMonthRegex: !simpleRegex
  # TODO: change to Portuguese according to corresponding Regex
  def: ^(the\s+)?(may|march)$
UnspecificDatePeriodRegex: !simpleRegex
  # TODO: modify below regex according to the counterpart in English
  def: ^[.]
PrepositionSuffixRegex: !simpleRegex
  # TODO: change to Portuguese according to corresponding Regex
  def: \b(on|in|at|around|from|to)$
RestOfDateTimeRegex: !simpleRegex
  # TODO: add this according to the related part in English
  def: ^[\.]
SetWeekDayRegex: !simpleRegex
  # TODO: add this according to the related part in English
  def: ^[\.]
NightRegex: !simpleRegex
  def: \b(meia noite|noite|de noite)\b
CommonDatePrefixRegex: !simpleRegex
  def: \b(dia)\s+$
DurationUnitRegex: !simpleRegex
  # TODO: add this according to the related part in English
  def: ^[\.]
DurationConnectorRegex: !simpleRegex
  # TODO: add this according to the related part in English
  def: ^[.]
CenturyRegex: !simpleRegex
  # TODO: modify below regex according to the counterpart in English
  def: ^[.]
DecadeRegex: !simpleRegex
  # TODO: modify below regex according to the counterpart in English
  def: ^[.]
DecadeWithCenturyRegex: !simpleRegex
  # TODO: modify below regex according to the counterpart in English
  def: ^[.]
RelativeDecadeRegex: !simpleRegex
  # TODO: modify below regex according to the counterpart in English
  def: ^[.]
YearSuffix: !nestedRegex
  def: (,?\s*({YearRegex}|{FullTextYearRegex}))
  references: [ YearRegex, FullTextYearRegex ]
SuffixAfterRegex: !simpleRegex
  # TODO: modify below regex according to the counterpart in English
  def: ^[.]
YearPeriodRegex: !simpleRegex
  # TODO: modify below regex according to the counterpart in English
  def: ^[.]
FutureSuffixRegex: !simpleRegex
  # TODO: modify below regex according to the counterpart in English
  def: ^[.]
WrittenDecades: !dictionary
  types: [ string, int ]
  # TODO: modify below dictionary according to the counterpart in English
  entries:
    "": 0
SpecialDecadeCases: !dictionary
  types: [ string, int ]
  # TODO: modify below dictionary there're special cases for written decades
  entries:
    '': 0
DefaultLanguageFallback: DMY
DurationDateRestrictions: []
AmbiguityFiltersDict: !dictionary
  types: [ string, string ]
  entries:
    'null': 'null'
# For TimeOfDay resolution
EarlyMorningTermList: !list
  types: [ string ] 
  entries: 
    - madrugada
MorningTermList: !list
  types: [ string ]
  entries:
    - manha
    - manhã
AfternoonTermList: !list
  types: [ string ]
  entries:
    - passado o meio dia
    - depois do meio dia
EveningTermList: !list
  types: [ string ] 
  entries: 
    - tarde
NightTermList: !list
  types: [ string ] 
  entries: 
    - noite
SameDayTerms: !list
  types: [ string ]
  entries: 
    - hoje
    - este dia
    - esse dia
    - o dia
PlusOneDayTerms: !list
  types: [ string ]
  entries: 
    - amanha
    - de amanha
    - dia seguinte
    - o dia de amanha
    - proximo dia
MinusOneDayTerms: !list
  types: [ string ]
  entries: 
    - ontem
    - ultimo dia
PlusTwoDayTerms: !list
  types: [ string ]
  entries: 
    - depois de amanha
    - dia depois de amanha
MinusTwoDayTerms: !list
  types: [ string ]
  entries: 
    - anteontem
    - dia antes de ontem
# For DatePeriodParserConfiguration Logic
MonthTerms: !list
  types: [ string ]
  entries:
    - mes
    - meses
MonthToDateTerms: !list
  types: [ string ]
  entries:
    - mes ate agora
    - mes ate hoje
    - mes ate a data
WeekendTerms: !list
  types: [ string ]
  entries:
    - fim de semana
WeekTerms: !list
  types: [ string ]
  entries:
    - semana
YearTerms: !list
  types: [ string ]
  entries:
    - ano
    - anos
YearToDateTerms: !list
  types: [ string ]
  entries:
    - ano ate agora
    - ano ate hoje
    - ano ate a data
    - anos ate agora
    - anos ate hoje
    - anos ate a data
SpecialCharactersEquivalent: !dictionary
  types: [ char, char ]
  entries:
    á: a
    é: e
    í: i
    ó: o
    ú: u
    ê: e
    ô: o
    ü: u
    ã: a
    õ: o
    ç: c
...